# 独習用8bitCPU

CPU298は以前作成したCPU2908の回路規模を縮小し、内部動作の理解に焦点をあてたプロセッサです。
割り込みをサポートしていないので、プロセッサとしての要件を満たしていませんが、独習用にはこのくらいの規模が良いと思います。



標準ロジックでこさえるのもいいのですが、それだと論理回路設計の1つの側面、プロダクトタームについて学ぶことが出来ません。
そこでCPU298ではSPLDを要所で使って、プロダクトタームについての学習も出来るようにしました。
部品点数を減らすのにも役立ちます。

# なぜ8bitか

回路規模が小さい
手配線の時配線量が少ない
ISAによっては実用的なCPUになる

# μコードのメリット
　ISAの決定を後回しにできる
　回路がコンパクトになる

# アーキテクチャ



# ISA

# 回路

# μコードROM

μコードとは

16bitです。
大きく分けて
・外部バス制御信号 RD,WR のコントロール
・バスに出力するレジスタの指定
・バスから亜ラッチするレジスタの指定
・ALUのオペコード、フラグラッチの指定
の4種類を制御します。

28C64のような8Kx8bitのROMに収まるようにしました。
　各命令ごとに16ステップ
　16bitのμコードを上位/下位にわけて1サイクルで2つラッチ
　全部で16bitx4Kなので、8bitx8kで収まります。

# PC


# 設計

## MCPUかフル機能CPUか

## 何ビットCPUにするか？
レジスタ幅
アドレス幅

## ワイヤードかμプログラムか

レジスタ幾つにしよう
　プログラムカウンタ
　インデックスレジスタ
　スタックポインタ

アドレッシングモードは

割り込み
DMA



ALU-OP

ALUOP table
		A2	A1	A0	M	CFIn CFOut		1:1	1:0	0:1	0:0	Mo	Cin	F	CinInv<-bit0 Cout(C or 0)=!M
NOP		0	0	0	0	x	0	0	0	0	0	1	x	0	(ALL-0)
AND		0	0	0	1	x	0	1	0	0	0	1	x	1
OR		0	0	1	0	x	0	1	1	1	0	1	x	1
XOR		0	0	1	1	x	0	0	1	1	0	1	x	1
NOT A	0	1	0	0	x	0	0	1	0	1	1	x	1
		0	1	0	1
		0	1	1	0
		0	1	1	1
A-Thru	1	0	0	0	x	0	1	0	1	0	1	x	0
B-Thru	1	0	0	1	x	0	1	1	0	0	1	x	0
ADD		1	0	1	0	0	C	1	1	0	0	0	0	1
SUB		1	0	1	1	1	!C	0	0	1	1	0	0	1
ADDC	1	1	0	0	C	C	1	1	0	0	0	1	1
SUBB	1	1	0	1	!C	!C	0	0	1	1	0	1	1
ADC0	1	1	1	0	C	C	0	0	0	0	0	1	1
All-1	1	1	1	1	x	0	1	1	1	1	1	x	0


JA
JNBE	SHORT L	2	符号なし比較で「>」なら分岐
条件：(CF OR ZF) = 0	ODITSZAPC

CF==0 & ZF==0

.........
JAE
JNB	SHORT L	2	符号なし比較で「>=」なら分岐
条件：CF = 0	ODITSZAPC
.........
JB
JNAE	SHORT L	2	符号なし比較で「<」なら分岐
条件：CF = 1	ODITSZAPC
.........
JBE
JNA	SHORT L	2	符号なし比較で「<=」なら分岐
条件：(CF OR ZF) = 1

CF==1 | ZF==1
